type GameManagerFactory {
  id: ID!
  rootAccount: String!
  chainId: Int!
  createdAt: Int!
}

type GameManagerTemplate {
  id: ID!
  name: String!
  address: String!
  chainId: Int!
  createdAt: Int!
}

type RawMetadata {
  id: ID!
  protocol: BigInt!
  pointer: String!
}

type GameManager {
  id: ID!
  template: GameManagerTemplate!
  poolId: BigInt!
  profileId: String!
  chainId: Int!
  createdAt: Int!
  tokenAddress: String!
  currentRoundNumber: BigInt!
  poolMetadataPointer: String!
  poolMetadataProtocol: BigInt!
  profileMetadataPointer: String!
  profileMetadataProtocol: BigInt!
  initData: String!
  gameRounds: [GameRound!]! @derivedFrom(field: "gameManager")
  # On Initialized
  gameFacilitatorId: BigInt
  poolFunds: BigInt
  currentRound: GameRound
  gmRootAccount: String
}

#Init runs before the GM entity is created
#So we use this entity to pass the GMInitParams
type GMInitParams {
  id: ID!
  gameFacilitatorId: BigInt
  gmRootAccount: String
}

type GameRound {
  id: ID!
  startTime: BigInt!
  endTime: BigInt!
  totalRoundAmount: BigInt!
  totalAllocatedAmount: BigInt!
  totalDistributedAmount: BigInt!
  gameStatus: Int!
  gameManager: GameManager!
  ships: [GrantShip!]! @derivedFrom(field: "gameRound")
  isGameActive: Boolean!
  realStartTime: Int
  realEndTime: Int
}

type ProfileMemberGroup {
  id: ID!
  role: String!
  addresses: [String!]!
}

type ProfileIdToAnchor {
  id: ID!
  profileId: String!
  anchor: String!
}

type Project @entity {
  id: String!
  chainId: Int!
  profileId: String! # bytes32
  status: Int! # uint8
  nonce: BigInt! # uint256
  name: String! # string
  pastNames: [String!]!
  metadata: RawMetadata! # ProjectMetadata
  pastProfileIds: [String!]!
  hasEditedProfile: Boolean!
  owner: String! # address
  members: ProfileMemberGroup
  anchor: String! # address
  grants: [Grant!]! @derivedFrom(field: "project")
  # members: ProfileMemberGroup
  totalAmountReceived: BigInt!
}

type ShipContext {
  id: String!
  shipAddress: String!
  grantShip: GrantShip!
  gameManager: GameManager!
}

type GrantShip @entity {
  # Registry => ProfileCreated
  id: ID!
  chainId: Int!
  profileId: String! # bytes32
  nonce: BigInt! # uint256
  name: String! # string
  profileMetadata: RawMetadata!
  pastProfileIds: [String!]!
  pastNames: [String!]!
  hasEditedProfile: Boolean!
  owner: String! # address
  anchor: String! # address
  status: Int!
  poolFunded: Boolean!
  balance: BigInt!
  shipAllocation: BigInt!
  totalAvailableFunds: BigInt!
  totalRoundAmount: BigInt!
  totalAllocated: BigInt!
  totalDistributed: BigInt!
  grants: [Grant!]! @derivedFrom(field: "ship")
  # Registry => Role Granted
  alloProfileMembers: ProfileMemberGroup
  # # Game Manager => Registered
  gameRound: GameRound
  gameManager: GameManager
  shipApplicationBytesData: String
  applicationSubmittedTime: Int
  isAwaitingApproval: Boolean
  hasSubmittedApplication: Boolean
  # # Game Manager => RecipientRejected/Accepted
  isApproved: Boolean
  approvedTime: Int
  isRejected: Boolean
  rejectedTime: Int
  applicationReviewReason: RawMetadata
  # # Game Manager => ShipLaunched
  poolId: BigInt
  hatId: String
  shipContractAddress: String # address
  shipLaunched: Boolean
  poolActive: Boolean
  # # Game Manager => Allocated
  isAllocated: Boolean
  # # Game Manager => Distributed
  isDistributed: Boolean
}

type Grant {
  id: ID!
  ship: GrantShip!
  project: Project!
  # project: Project!
}

type Transaction {
  id: ID!
  blockNumber: BigInt!
  srcAddress: String!
  txHash: String!
}

type Update {
  id: ID!
  scope: Int!
  tag: String!
  playerType: Int!
  domain: GameManager
  entityAddress: String! # address
  entityMetadata: RawMetadata
  postedBy: String # address
  content: RawMetadata!
  contentSchema: Int!
  postDecorator: Int
  timestamp: Int!
  postBlockNumber: Int!
  chainId: Int!
}

type FeedCard {
  id: ID!
  timestamp: Int!
  message: String
  richTextContent: RawMetadata
  sender: String
  tag: String!
  subjectMetadataPointer: String!
  subject: FeedItemEntity!
  object: FeedItemEntity
  embed: FeedItemEmbed
  domain: GameManager
  internalLink: String
  externalLink: String
}

type FeedItemEntity {
  id: ID!
  name: String!
  playerType: Int!
  # feedCardsAsSubject: [FeedCard!]! @derivedFrom(field: "subject")
  # feedCardsAsObject: [FeedCard!]! @derivedFrom(field: "object")
}

type FeedItemEmbed {
  id: ID!
  key: String
  pointer: String
  protocol: BigInt
  content: String
}

############ VOTING SCHEMA ################

type FactoryEventsSummary {
  id: ID!
  address: String!
  admins: [String!]!
  contestTemplateCount: BigInt!
  moduleTemplateCount: BigInt!
  moduleCloneCount: BigInt!
  contestBuiltCount: BigInt!
  ContestCloneCount: BigInt!
}

type ContestTemplate {
  id: ID!
  contestVersion: String!
  contestAddress: String!
  mdProtocol: BigInt!
  mdPointer: String!
  active: Boolean!
}

type ModuleTemplate {
  id: ID!
  moduleName: String!
  templateAddress: String!
  mdProtocol: BigInt!
  mdPointer: String!
  active: Boolean!
}

type StemModule {
  id: ID!
  moduleAddress: String!
  contestAddress: String
  contest: Contest
  moduleName: String!
  moduleTemplate: ModuleTemplate!
  filterTag: String!
}

type ContestClone {
  id: ID!
  contestAddress: String!
  contestVersion: String!
  filterTag: String!
}

type Contest {
  id: ID!
  contestAddress: String!
  contestVersion: String!
  filterTag: String!
  contestStatus: BigInt!
  votesModule: StemModule!
  pointsModule: StemModule!
  executionModule: StemModule!
  choicesModule: StemModule!
  isContinuous: Boolean!
  isRetractable: Boolean!
}

type LocalLog {
  id: ID!
  message: String
}

# Grant Ships Schema

type HALParams {
  id: ID!
  hatId: BigInt!
  hatsAddress: String!
}

type TVParams {
  id: ID!
  voteDuration: BigInt!
}

type ERCPointParams {
  id: ID!
  voteTokenAddress: String!
  votingCheckpoint: BigInt!
}

type SBTBalParams {
  id: ID!
  voteTokenAddress: String!
}

type ShipChoice {
  id: ID!
  contest: GrantShipsVoting!
  mdProtocol: BigInt!
  mdPointer: String!
  choiceData: Bytes!
  active: Boolean!
  voteTally: BigInt!
  votes: [ShipVote!]! @derivedFrom(field: "choice")
}

type ShipVote {
  id: ID!
  choice: ShipChoice!
  voter: GSVoter!
  amount: BigInt!
  contest: GrantShipsVoting!
  mdPointer: String!
  mdProtocol: BigInt!
  isRetractVote: Boolean!
}

type GSVoter {
  id: ID!
  address: String!
  votes: [ShipVote!]! @derivedFrom(field: "voter")
}

type GrantShipsVoting {
  id: ID!
  contest: Contest!
  hatId: BigInt!
  hatsAddress: String!
  voteTokenAddress: String!
  votingCheckpoint: BigInt!
  voteDuration: BigInt!
  startTime: BigInt
  endTime: BigInt
  isVotingActive: Boolean!
  isSBTVoting: Boolean!
  totalVotes: BigInt!
  choices: [ShipChoice!]! @derivedFrom(field: "contest")
  votes: [ShipVote!]! @derivedFrom(field: "contest")
}

type EnvioTX {
  id: ID!
  blockNumber: BigInt!
  srcAddress: String!
  txOrigin: String
  txHash: Bytes!
}

type Record {
  id: ID!
  tag: String!
  nonce: Bytes!
  hatId: BigInt!
  mdProtocol: BigInt!
  mdPointer: String!
  hatsPoster: HatsPoster!
}

type EventPost {
  id: ID!
  tag: String!
  hatId: BigInt!
  mdProtocol: BigInt!
  mdPointer: String!
  hatsPoster: HatsPoster!
}

type HatsPoster {
  id: ID!
  hatIds: [BigInt!]!
  hatsAddress: String!
  record: [Record!]! @derivedFrom(field: "hatsPoster")
  eventPosts: [EventPost!]! @derivedFrom(field: "hatsPoster")
}
